summary(df)
rm(list=ls())
A<-10.5
A
class(A)
is.numeric(A)
B<-5
B
is.integer(B)
C<-as.integer(A)
C
cost=C/B
cost
as.character(A)
first_name<-"Jai"
last_name<-"Ganesh"
message<-paste(first_name,last_name,"bought" ,as.character(B) ,"chocolates")
message
rhymes<-"Twinkle Twinkle Little Star"
rhymes
extracted_text=substr(rhymes, 17, 22)
extracted_text
library("stringr")
rhymes<-sub( "Little", "Big",rhymes)
rhymes
x<-2+3i
x
Re(x)
Im(x)
sqrt(as.complex(-15))
x<-1
print(x)
x
msg="hello"
msg
typeof(x)
typeof(msg)
x<-1:20
print(x)
x
rollNo<-1:70
rollNo
y<-20:30
y
x<-c(0.5,0.6)
x
x<-c(TRUE,FALSE)
x
x<-c(T,F)
x
x<-c("a","b","c")
x
x=9:29
x
x=c(1+0i,2+4i)
x
x<-vector("numeric",length=10)
x
?type
help(type)
y1<-c(1.7,"a")
y1
y2=c(TRUE,2)
y2
y3<-c("a",TRUE);y3
class(y1)
class(y2)
class(y3)
y11<-c(1.7,"3.2")
y11
class(y11)
y22<-c(FALSE,TRUE)
y22
class(y22)
x<-0:6
x
class(x)
y=as.numeric(x)
y
class(y)
z=as.character(x)
z
class(z)
l=as.logical(x)
l
class(l)
com=as.complex(x)
com
class(com)
library(MASS)
newSurvey=na.omit(survey)
head(newSurvey)
#install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(ggplot2)
ggplot(newSurvey)+
geom_bar(aes(newSurvey$Sex,fill=newSurvey$Sex)) +
ggtitle("Male and Female participants") +
xlab("male and female") +
ylab("frequency")
ggplot(newSurvey)+
geom_bar(aes(newSurvey$W.Hnd,fill=newSurvey$W.Hnd)) +
ggtitle("Left Handers and Right Handers") +
ylab("count")
male_left_handers= newSurvey[newSurvey$W.Hnd=="Left" & newSurvey$Sex=="Male",]
female_left_handers= newSurvey[newSurvey$W.Hnd=="Left" & newSurvey$Sex=="Female",]
custom_data = rbind(male_left_handers, female_left_handers)
ggplot(as.data.frame(table(custom_data$Sex)), aes(x=Var1, y = Freq,
fill=Var1)) +
geom_bar(stat="identity")+
labs(title="Female Left Handers and Male Left Handers")
smoking_habits = ggplot(as.data.frame(table(male_left_handers$Smoke)),
aes(x = "", y =Freq, fill=Var1)) +
geom_bar(stat="identity")+
geom_col(color = "black") +
coord_polar("y", start=0)
smoking_habits
ggplot(newSurvey, aes(x=newSurvey$Age)) +
geom_histogram() +
stat_bin(bins = 30) +
labs(title="Age Distribution", xlabel="Age Range", ylabel="Frequency")
ggplot(newSurvey, aes(x=Age, y=Wr.Hnd)) + geom_point(size=2)
ggplot(custom_data, aes(x=Pulse, y=Wr.Hnd, color=Sex, size=Height)) + geom_point()
head(newSurvey)
ggplot(newSurvey, aes(x=Height, color=Sex,fill=Sex)) +
geom_histogram( alpha=0.5, position="identity") +
facet_wrap(~W.Hnd)
ggplot(newSurvey, aes(x=Wr.Hnd, y=NW.Hnd, color=W.Hnd, )) +
facet_grid(.~Clap) +
geom_point(size=2)
ggplot(newSurvey, aes(x=Age,color=Exer,fill=Exer)) +
facet_grid(.~Sex)+
geom_histogram(alpha=0.7)+
labs(title="Age Distribution", xlabel="Age Range", ylabel="Frequency")
ggplot(newSurvey, aes(x=Wr.Hnd, y=Smoke))+
geom_boxplot(outlier.colour="red", outlier.shape=8,outlier.size=4)
library("MASS")
survey[rowSums(is.na(survey)) > 0,]
#or
survey[!complete.cases(survey),]
newsurvey<-na.omit(survey)
table(newsurvey["Sex"])
table(newsurvey["W.Hnd"])
round(table(newsurvey["W.Hnd"])/length(newsurvey$W.Hnd),2)
t <- tapply(newsurvey$W.Hnd, newsurvey$Sex, table)
t<-unname(unlist(t))
d <-
data.frame(
male_left_hander = c(t[3]),
female_left_hander = c(t[1])
)
d
install.packages("dplyr")
library("dplyr")
male_left_never=length(filter(newsurvey, Sex=="Male" & W.Hnd=="Left" & Smoke=="Never"))
male_left=length(filter(newsurvey, Sex=="Male" & W.Hnd=="Left"))
male_left_never/male_left*100
install.packages("dplyr")
ls
knitr::purl("20BCE1025_Abhishek_N_N_Lab_6.Rmd")
#install.packages("dplyr")
library("dplyr")
knitr::purl("/lab_6/20BCE1025_Abhishek_N_N_Lab_6.Rmd")
list.files()
getwd()
knitr::purl("./lab_6/20BCE1025_Abhishek_N_N_Lab_6.Rmd")
knitr::purl("./lab_6/20BCE1025_Abhishek_N_N_Lab_6.Rmd",documentation = 2)
# geom_bar is designed to make it easy to create bar charts that show
# counts (or sums of weights)
g <- ggplot(mpg, aes(class))
library("MASS")
# geom_bar is designed to make it easy to create bar charts that show
# counts (or sums of weights)
g <- ggplot(mpg, aes(class))
library("ggplot2")
# geom_bar is designed to make it easy to create bar charts that show
# counts (or sums of weights)
g <- ggplot(mpg, aes(class))
# Number of cars in each class:
g + geom_bar()
# Total engine displacement of each class
g + geom_bar(aes(weight = displ))
# Map class to y instead to flip the orientation
ggplot(mpg) + geom_bar(aes(y = class))
library("dplyr")
starwars %>%
select(name, mass) %>%
mutate(
mass2 = mass * 2,
mass2_squared = mass2 * mass2
)
rm(list=ls())
getwd()
x<-10
ls()
help(options)
# options()
options(digits = 3)
# history()
# history(max=Inf)
# savehistory(file = "myRHistory")
# loadhistory(file = "diffRHistory.txt")
d<-Sys.Date()
d
format(d,format="%a")
format(d,format="%A")
format(d,format="%u")
format(d,format="%b")
format(d,format="%B")
format(d,format="%m")
format(d,format="%y")
format(d,format="%Y")
format(d,format="%C")
format(d,format="%d")
format(d,format="%j")
format(d,format="%D")
format(d,format="%d-%b-%y")
Sys.timezone()
difftime("2022-9-2","2002-4-7",units = "days")
difftime("2022-9-2","2002-4-7",units = "weeks")
difftime("2022-9-2","2002-4-7",units = "hours")
s<-c("27/02/92")
s
d2<-as.Date(s,"%d/%m/%y")
d2
s2 <- c("02 / 27 / 92", "02 / 27 / 92", "01 / 14 / 92", "02 / 28 / 92", "02 / 01 / 92")
d3<-as.Date(s2,"%m / %d / %y")
d3
class(d3)
t<-as.POSIXct("08:32:07",format="%H:%M:%S")
t
t2 <- as.POSIXct("08:32:08", format = "%H:%M:%S")
t2
if (t == t2) {
print("Equal times")
} else{
if (t < t2) {
print ("Time1 smaller")
} else{
print ("Time2 smaller")
}
}
difftime(t, t2, tz,units = c("auto", "secs", "mins","hours","days", "weeks"))
class(difftime(t, t2, tz,units = c("auto", "secs", "mins","hours","days", "weeks")))
# declaring a time object
time1 <- as.POSIXct("08:35:07", format = "%H:%M:%S")
print ("Time 1")
print (time1)
time2 <- as.POSIXct("08:32:08", format = "%H:%M:%S")
print ("Time 2")
print (time2)
if (time1 == time2) {
print("Equal times")
} else {
# checking if time1 is smaller than time2
if (time1 < time2) {
print ("Time2 - Time1")
# calculating time2-time1
difftime(time2, time1, units = "secs")
} else{
# calculating time1-time2
print ("Time1 - Time2")
difftime(time1, time2, units = "secs")
}
}
# declaring a time object
time1 <- as.POSIXct("08:35:07", format = "%H:%M:%S")
print ("Time 1")
print (time1)
time2 <- as.POSIXct("08:32:08", format = "%H:%M:%S")
print ("Time 2")
print (time2)
if (time1 == time2) {
print("Equal times")
} else{
# checking if time1 is smaller than time2
if (time1 < time2) {
print ("Time2 - Time1")
# calculating time2-time1
print (time2 - time1)
} else{
# calculating time1-time2
print ("Time1 - Time2")
print (time1 - time2)
}
}
apple <- c('red','green',"yellow")
apple
class(apple)
data1 = c(3, 6, 9, 12, 78, 34, 5, 7, 7) ## numerical data
data1
data1.text = c("Mon", "Tue", "Wed") ## Text data
data1.text
data1.text = c(data1.text, "Thu", "Fri")
data1.text
Data2=c(data1,data1.text)
Data2
numbers = 1:10
numbers
numbers <- seq(from=0,to=100,by=20)
numbers
v=seq(2,4, 0.4)
V=seq(1,4, length.out = 5)
v
V
x<-vector(mode = "numeric", length=10)
x
assign("b",c(1:12))
b
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
u <- t[c(2,3,6)]
u
v <- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]
v
x <- t[c(-2,-5)]
x
y <- t[c(0,0,0,0,0,0,1)]
y
y <- t[c(0,5,0,3,0,0,1)]
y
# Create two vectors.
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11,0,8,1,2)
# Vector addition.
add.result <- v1+v2
print(add.result)
# Vector subtraction.
sub.result <- v1-v2
print(sub.result)
# Vector multiplication.
multi.result <- v1*v2
print(multi.result)
# Vector division.
divi.result <- v1/v2
print(divi.result)
mod.result=v1%%v2
print(mod.result)
v <- c(3,8,4,5,0,11, -9, 304)
# Sort the elements of the vector.
sort.result <- sort(v)
print(sort.result)
# Sort the elements in the reverse order.
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)
length(v)
# It is possible to delete an entire vector by assigning it to NULL.
V=NULL
V
v <- c(3,8,4,5,0,11, -9, 304)
m <- rep(v,each=2)
print(m)
n <- rep(v,times=2)
print(n)
o <- rep(v,length.out=10)
print(o)
print(min(v))
print(max(v))
print(sum(v))
print(mean(v))
print(sd(v))
print(which.min(v))
# Creating Vectors
vec1 <- c(1, 2, 3)
vec2 <- c(TRUE, FALSE)
# Creating a list of Vectors
listt = list(vec1, vec2)
# Printing List
print (listt)
# Printing List
print (listt[[1]])
print (listt[[2]][1])
# R program to create a list of Vectors
# Creating Vectors
vec1 <- c(1, 2, 3)
vec2 <- c(TRUE, FALSE)
# Creating list of Vectors
lst = list(vec1, vec2)
# Creating a new Vector
vec3 <- c(1 + 3i)
# Adding Vector to list
lst[[3]]<- vec3
# Printing List
print(lst)
# Modifying List element
lst[[2]]<-c("TEACH", "CODING")
# Removing Vector from list
lst[[2]]<-NULL
# Firstly, create two lists.
list1 <- list(1, 2, 3, 4, 5, 6, 7)
list2 <- list("Geeks", "For", "Geeks")
# Then to merge these two lists.
merged_list <- c(list1, list2)
print(merged_list)
list1 <- list(1:5)
print(list1)
list2 <-list(11:15)
print(list2)
# Now, convert the lists to vectors.
v1 <- unlist(list1)
v2 <- unlist(list2)
print(v1)
print(v2)
# Defining a list with names
x <- list(mt = matrix(1:6, nrow = 2),lt = letters[1:8],n = c(1:10))
# Print list elements using the names given
# Prints element of the list named "mt"
cat("Element named 'mt':\n")
print(x$mt)
cat("\n")
# Print element of the list named "n"
cat("Element named 'n':\n")
print(x$n)
# Defining a named list
lt <- list(a = 1,let = letters[1:8],mt = matrix(1:6, nrow = 2))
cat("List before modifying:\n")
print(lt)
# Modifying element named 'a'
lt$a <- 5
cat("List after modifying:\n")
print(lt)
# Removing element named 'a'
lt <- within(lt, rm(a))
M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M)
y <- matrix(1:20, nrow = 4, ncol = 5)
A = matrix(c(1,2,3,4),nrow=2,byrow=T)
print(y)
print(A)
Rownames=c("R1","R2","R2")
Colnames=c("C1","C2","C3")
y = matrix(20:15, nrow = 3, ncol = 3, dimnames=list(Rownames,Colnames))
y
y = matrix(20:9, nrow = 3, ncol = 3, dimnames=list(Rownames,Colnames))
y
A <- matrix(c(2,3,-2,1,2,2),3,2)
A
B <- matrix(c(1,4,-2,1,2,1),3,2)
B
C<-A+B
C
A - B
c<-3
c*A
A <- matrix(c(2,3,-2,1,2,2),3,2)
A
D <- matrix(c(2,-2,1,2,3,1),2,3)
D
C <- D %*% A
C
A
AT <- t(A)
AT
ATT <- t(AT)
ATT
U <- matrix(1,3,2)
U
Z <- matrix(0,3,2)
Z
result <- array(c(1:100),dim = c(3,3,2))
result
print(result[3,,2])
print(result[1,3,1])
print(result[,,2])
# Create two vectors of different lengths.
vector1 <- c(5, 9, 3, 10, 12)
vector2 <- c(10, 11, 12, 13, 14, 15)
column.names <- c("COL1", "COL2", "COL3")
row.names <- c("ROW1", "ROW2", "ROW3")
matrix.names <- c("Matrix1", "Matrix2")
# Take these vectors as input to the array.
result <- array(
c(vector1, vector2),
dim = c(3, 3, 2),
dimnames = list(row.names, column.names, matrix.names)
)
print(result)
# Create two vectors of different lengths.
vector1 <- c(5, 9, 3)
vector2 <- c(10, 11, 12, 13, 14, 15)
# Take these vectors as input to the array.
array1 <- array(c(vector1, vector2), dim = c(3, 3, 2))
# Create two vectors of different lengths.
vector3 <- c(9, 1, 0)
vector4 <- c(6, 0, 11, 3, 14, 1, 2, 6, 9)
array2 <- array(c(vector1, vector2), dim = c(3, 3, 2))
# create matrices from these arrays.
matrix1 <- array1[, , 2]
matrix1
matrix2 <- array2[, , 2]
matrix2
# Add the matrices.
result <- matrix1 + matrix2
print(result)
m1 <- matrix(C<-(1:10),nrow=5, ncol=6)
m1
a_m1 <- apply(m1, 2, sum)
a_m1
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
new.array <- array(c(vector1,vector2),dim = c(3,3,2))
print(new.array)
# Use apply to calculate the sum of the rows across all
# the matrices.
result <- apply(new.array, c(1), sum)
print(result)
my_df <- data.frame(
Id = c(1, 2, 3),
Name = c("Ramu", "Raju", "Ravi"),
Marks = c(50, 40, 25)
)
my_df
